require(['jquery','charts','ysdtemplate'], function($, Chart, tmpl) {


  bookingIncomingModel = {

     result : null,
     year: <%=current_year%>,
     months : {1: 'Ene',
        2: 'Feb',
        3: 'Mar',
        4: 'Abr',
        5: 'May',
        6: 'Jun',
        7: 'Jul',
        8: 'Ago',
        9: 'Sep',
        10: 'Oct',
        11: 'Nov',
        12: 'Dic'},
     graphData : { labels   : [] ,
                   datasets : [
                     {
                       label: '',
                       backgroundColor : "rgba(151,187,205,0.5)",
                       borderColor : "rgba(151,187,205,1)",
                       borderWidth: 1,
			                 data : []
			               },
                     {
                       label: '',
                       backgroundColor : "rgba(220, 220, 220, 0.5)",
                       borderColor : "rgba(220, 220, 220, 1)",
                       borderWidth: 1,
                       data : []
                     }]
                },

     maxValue: function() {
        var max= 10;
        for (var property in this.result) {
          var total = new Number(this.result[property].total);
          var total_previous_year = new Number(this.result[property].total_previous_year);
          if (total > max) {
            max = total;
          }
          if (total_previous_year > max) {
              max = total_previous_year;
          }
        }
        return max;
     },

     loadData: function(year) {

       var url = '/api/booking/analysis/invoicing';
       if (year) {
         url += '?year='+year;
         this.year = year;
       }

  	   $.ajax({
  	   	       type: 'GET',
  	   	       url : url,
  	   	       contentType: 'application/json; charset=utf-8',
  		         dataType : 'json',
  		         success: function(data, textStatus, jqXHR) {
                  bookingIncomingModel.result = data;
                  bookingIncomingModel.graphData.labels = [];
                  bookingIncomingModel.graphData.datasets[0].data = [];
                  bookingIncomingModel.graphData.datasets[1].data = [];
                  for (item in data) {
                    bookingIncomingModel.graphData.labels.push(bookingIncomingModel.months[item]);
                    bookingIncomingModel.graphData.datasets[0].label = year;
                    bookingIncomingModel.graphData.datasets[0].data.push(new Number(data[item].total));
                    bookingIncomingModel.graphData.datasets[1].label = year - 1;
                    bookingIncomingModel.graphData.datasets[1].data.push(new Number(data[item].total_previous_year));
                  }
                  bookingIncomingView.update('data_available');
              }
          });

     }

  };

  bookingIncomingController = {

  };

  bookingIncomingView = {

     ctx : null,
     chart: null,

     init : function() {
     	this.ctx = document.getElementById("invoicing_by_month_graphic").getContext("2d");
     },

     update: function(status) {

        switch(status) {
        	case 'data_available':
            if (this.chart) {
             $('#invoicing_by_month_graphic').replaceWith('<canvas id="invoicing_by_month_graphic" width="640" height="560"></canvas>');
        	   this.ctx = document.getElementById("invoicing_by_month_graphic").getContext("2d");
            }
            this.chart = new Chart(this.ctx, {
                type: 'bar',
                data: bookingIncomingModel.graphData,
                options: {
                    responsive: true,
                    tooltips: {
                        callbacks: {
                            label: function(tooltipItem, data) {
                                var allData = data.datasets[tooltipItem.datasetIndex].data;
                                var tooltipLabel = data.labels[tooltipItem.index];
                                var tooltipData = allData[tooltipItem.index];
                                var total = 0;
                                for (var i=0; i<allData.length; i++) {
                                    total += allData[i];
                                }
                                var tooltipPercentage = Math.round((tooltipData / total) * 100);
                                return tooltipLabel + ': ' + tooltipData + ' (' + tooltipPercentage + '%)';
                            }
                        }
                    },
                    scales: {
                        xAxes: [{
                            stacked: false,
                            ticks: {
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: bookingIncomingModel.maxValue(),
                                fixedStepSize: Math.ceil(bookingIncomingModel.maxValue() / 20),
                            }
                        }]
                    }
                }
            });

        	  $("#incoming_money_data").html(tmpl('booking_incoming_table', {data: bookingIncomingModel.result,
                months: bookingIncomingModel.months, year: bookingIncomingModel.year}));
        	  break;
        }

       
     }

  };

  bookingIncomingView.init();
  bookingIncomingModel.loadData(<%=current_year%>);

});